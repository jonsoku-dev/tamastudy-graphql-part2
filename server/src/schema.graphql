type CreateCommentResponse {
  result: Comment!
}

input CreateCommentInput {
  desc: String!
}

type Mutation {
  CreateComment(postId: String!, input: CreateCommentInput!): CreateCommentResponse
  DeleteComment(postId: String!, commentId: String!): DeleteCommentResponse
  EditComment(postId: String!, commentId: String!, input: EditCommentInput!): EditCommentResponse
  CreatePost(input: CreatePostInput!): CreatePostResponse
  DeletePost(postId: String!): DeletePostResponse
  EditPost(postId: String!, input: EditPostInput!): EditPostResponse
  Login(input: LoginInput!): LoginResponse
  Register(input: RegisterInput!): RegisterResponse
}

type DeleteCommentResponse {
  result: String!
}

type EditCommentResponse {
  result: Comment!
}

input EditCommentInput {
  desc: String
}

type GetCommentListResponse {
  result: [Comment!]!
}

type Query {
  GetCommentList(postId: String!): GetCommentListResponse
  GetPost(postId: String!): GetPostResponse
  GetPostList: GetPostListResponse
  Foo(id: String!): String
  GetUser: GetUserResponse!
}

type Comment @entity {
  _id: String! @id @column
  desc: String @column
  user: UserForComment @column
  postId: String @column
  createdAt: String @column
  updatedAt: String @column
}

type UserForComment {
  _id: String!
  username: String!
}

type CreatePostResponse {
  result: Post!
}

input CreatePostInput {
  title: String!
  desc: String!
}

type DeletePostResponse {
  result: Post!
}

type EditPostResponse {
  result: Post!
}

input EditPostInput {
  title: String
  desc: String
}

type GetPostResponse {
  result: Post!
}

type GetPostListResponse {
  result: [Post!]
}

type Post @entity {
  _id: String! @id @column
  title: String @column
  desc: String @column
  view: String @column
  user: UserForPost @column
  comments: [Comment!] @column
  createdAt: String @column
  updatedAt: String @column
}

type UserForPost {
  _id: String!
  username: String!
}

type GetUserResponse {
  result: User!
}

type LoginResponse {
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type RegisterResponse {
  result: User!
}

input RegisterInput {
  email: String!
  username: String!
  password: String!
}

type User @entity {
  _id: String! @id
  username: String! @column
  email: String! @column
  password: String! @column
  createdAt: String @column
  updatedAt: String @column
}
