type CreatePostResponse {
  result: Post!
}

input CreatePostInput {
  title: String!
  desc: String!
}

type Mutation {
  CreatePost(input: CreatePostInput!): CreatePostResponse
  EditPost(postId: String!, input: EditPostInput!): EditPostResponse
  Login(input: LoginInput!): LoginResponse
  Register(input: RegisterInput!): RegisterResponse
}

type EditPostResponse {
  result: Post!
}

input EditPostInput {
  title: String
  desc: String
}

type GetPostResponse {
  result: Post!
}

type Query {
  GetPost(postId: String!): GetPostResponse
  GetPostList: GetPostListResponse
  Foo(id: String!): String
  GetUser: GetUserResponse!
}

type GetPostListResponse {
  result: [Post!]
}

type Post @entity {
  _id: String! @id
  title: String @column
  desc: String @column
  view: String @column
  user: UserForPost @column
  createdAt: String @column
  updatedAt: String @column
}

type UserForPost {
  _id: String!
  username: String!
}

type GetUserResponse {
  result: User!
}

type LoginResponse {
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type RegisterResponse {
  result: User!
}

input RegisterInput {
  email: String!
  username: String!
  password: String!
}

type User @entity {
  _id: String! @id
  username: String! @column
  email: String! @column
  password: String! @column
  createdAt: String @column
  updatedAt: String @column
}
